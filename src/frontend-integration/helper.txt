// ================================
// 8. USAGE EXAMPLES FOR FRONTEND
// ================================

/*
// Frontend Integration Examples

// 1. Get Batch Detailed Summary
const getBatchDetailedSummary = async (batchId) => {
  try {
    const response = await fetch(`/api/batches/${batchId}/detailed-summary`, {
      headers: {
        'Content-Type': 'application/json',
        'user-id': getCurrentUserId()
      }
    });
    
    const data = await response.json();
    if (data.success) {
      return data.data;
    }
    throw new Error(data.message);
  } catch (error) {
    console.error('Error fetching batch detailed summary:', error);
    throw error;
  }
};

// 2. Get Tab-specific Data
const getTabData = async (batchId, tabName) => {
  const endpoints = {
    'genealogy': `/api/batches/${batchId}/genealogy`,
    'samples-tests': `/api/batches/${batchId}/samples-tests`,
    'deviations-capa': `/api/batches/${batchId}/deviations-capa`,
    'equipment': `/api/batches/${batchId}/equipment`
  };

  try {
    const response = await fetch(endpoints[tabName], {
      headers: {
        'Content-Type': 'application/json',
        'user-id': getCurrentUserId()
      }
    });
    
    const data = await response.json();
    if (data.success) {
      return data.data;
    }
    throw new Error(data.message);
  } catch (error) {
    console.error(`Error fetching ${tabName} data:`, error);
    throw error;
  }
};

// 3. Perform Batch Actions
const performBatchAction = async (batchId, action, notes = '') => {
  try {
    const response = await fetch(`/api/batches/${batchId}/actions`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'user-id': getCurrentUserId()
      },
      body: JSON.stringify({
        action,
        userId: getCurrentUserId(),
        notes
      })
    });
    
    const data = await response.json();
    if (data.success) {
      return data.data;
    }
    throw new Error(data.message);
  } catch (error) {
    console.error(`Error performing ${action} action:`, error);
    throw error;
  }
};

// 4. React Component Structure Example
const BatchDetailedSummary = ({ batchId }) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [batchData, setBatchData] = useState(null);
  const [tabData, setTabData] = useState({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadBatchSummary();
  }, [batchId]);

  useEffect(() => {
    if (activeTab !== 'overview') {
      loadTabData(activeTab);
    }
  }, [activeTab]);

  const loadBatchSummary = async () => {
    try {
      setLoading(true);
      const data = await getBatchDetailedSummary(batchId);
      setBatchData(data);
    } catch (error) {
      console.error('Failed to load batch summary:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadTabData = async (tabName) => {
    try {
      const data = await getTabData(batchId, tabName);
      setTabData(prev => ({ ...prev, [tabName]: data }));
    } catch (error) {
      console.error(`Failed to load ${tabName} data:`, error);
    }
  };

  const handleAction = async (action) => {
    try {
      await performBatchAction(batchId, action);
      loadBatchSummary(); // Refresh data
      alert(`Batch ${action}d successfully!`);
    } catch (error) {
      alert(`Failed to ${action} batch: ${error.message}`);
    }
  };

  if (loading) return <div>Loading batch summary...</div>;
  if (!batchData) return <div>Batch not found</div>;

  return (
    <div className="batch-detailed-summary">
      {/* Batch Header */}
      <BatchHeader batchData={batchData} onAction={handleAction} />
      
      {/* Summary Cards */}
      <SummaryCards cardSummary={batchData.cardSummary} />
      
      {/* Tab Navigation */}
      <TabNavigation 
        activeTab={activeTab} 
        onTabChange={setActiveTab}
        overdueEquipment={batchData.overdueEquipment}
      />
      
      {/* Tab Content */}
      <TabContent 
        activeTab={activeTab}
        batchData={batchData}
        tabData={tabData}
      />
    </div>
  );
};
*/